-- DCGM - CYGI License.
-- Copyright (c) 2025 Victor Fuchadzhy.
-- BVG: Hand animation controller.

torch_state = 0

local cache_callback = nil
local cache_data = nil

function play(data, callback)
    try_disable_ads()

    cache_callback = callback
    cache_data = data

    if (data.target_state) then
        lam2.add_action(lam2.get_template_action_wait_for_seconds(0.05))   -- Anim bug? small delay to prevent ctd.
        lam2.add_action(get_template_action_nvg_enable_start())            -- Enter hand motion.
        lam2.add_action(get_template_action_nvg_enable(data.item_section)) -- Equip nvg motion.
    else
        lam2.add_action(get_template_action_nvg_disable_start())           -- Fade in.
        lam2.add_action(get_template_action_nvg_disable(section))          -- Unequip NVG motion.
        lam2.add_action(lam2.get_template_action_wait_for_seconds(0.05))   -- Anim bug? Small delay to prevent ctd.
        lam2.add_action(get_template_action_nvg_disable_end())             -- Exit hand motion.
    end
end

function try_disable_ads()
    local weapon_zoomed = bvg_weapon.is_actor_weapon_zoomed() and
    (not (IsPistol(db.actor:active_item(), nil)) or db.actor:active_detector())
    local det_active = db.actor:active_detector() or nil

    if (db.actor:active_item() and (not det_active and weapon_zoomed)) then
        if (get_console():get_bool("wpn_aim_toggle")) then
            level.press_action(bind_to_dik(key_bindings.kWPN_ZOOM))
        else
            level.release_action(bind_to_dik(key_bindings.kWPN_ZOOM))
        end
    end
end

function can_play()
    if (not is_animation_allowed()) or (not item_device.can_toggle_torch()) then return false end
    if (lam2.get_action_with_tag("nvg_animation")) then return false end
    
    return true
end

function is_animation_allowed()
    return (torch_state == 0 and (not game.only_movekeys_allowed()) and (not IsMoveState("mcClimb")))
end

function is_playing()
    return torch_state == 1
end

function get_template_action_nvg_enable_start()
    local a = lam2.get_template_action_play_animation()
    a.tag = "nvg_animation"
    a.name = "nvg_enable_start"
    a.sec = "anim_nvg_transition_hud"
    a.anm = "anm_show_start"
    a.cam = "cam_show_start"
    a.hands = 1
    a.anm_blend = true
    a.on_enter = function (self)
        game.play_hud_anm("liz\\headlamp\\liz_headlamp_toggle_weapon_sway.anm", 0, 1, 1, false)
        
        -- weapon inertia expanded patch
        if (liz_inertia_expanded) then
            liz_inertia_expanded.set_mask_flag(liz_inertia_expanded.mask_layers.anm_plays, true)
        end
    end
    return a
end

function get_template_action_nvg_enable(section)
    local a = lam2.get_template_action_play_animation()
    a.tag = "nvg_animation"
    a.name = "nvg_enable"
    a.sec = "anim_nvg_hud"
    a.anm = "anm_show"
    a.hands = 1
    a.anm_blend = true
    a.target = section
    a.fade_start = false
    a.fade_end = false
    a.on_execute = function (self, time)
        if time > self.duration - 0.35 and not self.fade_start then
            self.fade_start = true
            level.add_pp_effector("deimos_short.ppe", 4233, false)
        end
        if time > self.duration - 0.25 and not self.fade_end then
            self.fade_end = true
            level.remove_pp_effector(4233)
        end
    end
    a.on_exit = function (self)
        
        if (cache_callback ~= nil) then
            cache_callback(cache_data)
        end
                    
        torch_state = 0
        
        -- Weapon inertia expanded patch
        if (liz_inertia_expanded) then
            liz_inertia_expanded.set_mask_flag(liz_inertia_expanded.mask_layers.anm_plays, false)
        end
    end
    return a
end

function get_template_action_nvg_disable_start()
    local a = {
        tag = "nvg_animation",
        name = "nvg_disable_start",
        hands = 1,
        fade_disabled = false,
        enter = function (self)
            level.add_pp_effector("deimos_short.ppe", 4233, false)
        end,
        execute = function (self,time)
            if (not self.fade_disabled) then
                self.fade_disabled = true
                level.remove_pp_effector(4233)
            end
            if (time > 0.4) then
                return lam2.states.success
            end
            return lam2.states.running
        end
    }
    return a
end

function get_template_action_nvg_disable(section)
    local a = lam2.get_template_action_play_animation()
    a.tag = "nvg_animation"
    a.name = "nvg_disable"
    a.sec = "anim_nvg_hud"
    a.anm = "anm_hide"
    a.cam = "cam_hide"
    a.hands = 1
    a.anm_blend = true
    a.target = section
    a.on_enter = function (self)
        game.play_hud_anm("liz\\headlamp\\liz_headlamp_toggle_weapon_sway.anm", 0, 1, 1, false)
        
        if (cache_callback ~= nil) then
            cache_callback(cache_data)
        end
        
        -- Weapon inertia expanded patch
        if (liz_inertia_expanded) then
            liz_inertia_expanded.set_mask_flag(liz_inertia_expanded.mask_layers.anm_plays, true)
        end
    end
    return a
end

function get_template_action_nvg_disable_end()
    local a = lam2.get_template_action_play_animation()
    a.tag = "nvg_animation"
    a.name = "nvg_disable_end"
    a.sec = "anim_nvg_transition_hud"
    a.anm = "anm_hide_end"
    a.hands = 1
    a.anm_blend = true
    a.on_exit = function (self)
        torch_state = 0
        
        -- Weapon inertia expanded patch
        if (liz_inertia_expanded) then
            liz_inertia_expanded.set_mask_flag(liz_inertia_expanded.mask_layers.anm_plays, false)
        end
    end
    return a
end